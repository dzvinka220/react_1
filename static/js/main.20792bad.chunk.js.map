{"version":3,"sources":["components/Post.js","App.js","serviceWorker.js","index.js"],"names":["Post","props","className","src","photo","alt","name","nickname","date","content","image","postList","App","map","post","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yMAkBeA,G,KAfH,SAACC,GACT,OACI,yBAAKC,UAAU,QACX,yBAAKA,UAAU,SAASC,IAAKF,EAAMG,MAAOC,IAAI,UAC9C,0BAAMH,UAAU,QAAQD,EAAMK,KAA9B,KACA,0BAAMJ,UAAU,YAAhB,IAA6BD,EAAMM,SAAnC,YACA,0BAAML,UAAU,QAAQD,EAAMO,MAAY,6BAC1C,yBAAKN,UAAU,WAAWD,EAAMQ,QAAhC,KACA,yBAAKP,UAAU,QAAQC,IAAKF,EAAMS,MAAOL,IAAI,gBCDnDM,EAAW,CACjB,CACYL,KAAM,mBACNF,MAVS,6FAWTG,SAAU,cACVE,QAAQ,kDACRC,MAZM,gGAaNF,KAAK,gCAEjB,CACEF,KAAM,UACNF,MAhBoB,gFAiBpBG,SAAU,SACVE,QAAQ,8BACRC,MAlBiB,+EAmBjBF,KAAK,0BAEP,CACEF,KAAM,OACNF,MAtBwB,4CAuBxBG,SAAU,oBACVE,QAAQ,uBACRC,MAxBiB,sHAyBjBF,KAAK,iCAaQI,MATf,WACE,OACE,6BACID,EAASE,KAAI,SAAAC,GAAI,OAAI,kBAAC,EAASA,QC5BnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD2H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.20792bad.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\nconst Post =(props) =>{\r\n    return (\r\n        <div className=\"post\">\r\n            <img className=\"avatar\" src={props.photo} alt='huina'></img>\r\n            <span className=\"name\">{props.name} </span>\r\n            <span className=\"nickname\"> {props.nickname} • </span>\r\n            <span className=\"date\">{props.date}</span><br/>\r\n            <div className=\"content\">{props.content} </div>\r\n            <img className=\"image\" src={props.image} alt='post-img'></img>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Post;","import React from 'react';\nimport Post from './components/Post';\n\nconst ANAKIN_IMAGE = \"https://upload.wikimedia.org/wikipedia/en/thumb/7/74/Anakin-Jedi.jpg/220px-Anakin-Jedi.jpg\";\nconst RAY_IMAGE = \"https://specials-images.forbesimg.com/imageserve/5e63b3c8e1e617000759130e/960x0.jpg?fit=scale\";\nconst WITHCER_IMAGE = \"https://pbs.twimg.com/profile_images/1138480974227025920/UmdmIbjZ_400x400.png\";\nconst CIRI_IMAGE = \"https://i.pinimg.com/originals/2a/6f/b3/2a6fb3d90600393b714cf5973dc19710.jpg\";\nconst XENAPRINCES_IMAGE = \"https://fantlab.ru/blogfiles/b10806/img/1\";\nconst XENA_IMAGE = \"https://avatars.mds.yandex.net/get-zen_doc/1333513/pub_5e3a48d44dde974aca0a7979_5e3a58423c25fe42aced7e01/scale_1200\";\n\nconst postList = [\n{\n            name: \"Anakin skywalker\",\n            photo: ANAKIN_IMAGE,\n            nickname: \"@dart_vader\",\n            content:\"WTF? Who is Ray? Why she is Skywalker? Luke...?\",\n            image: RAY_IMAGE,\n            date:\"26 февр.\",\n},\n{\n  name: \"Cirilla\",\n  photo: WITHCER_IMAGE,\n  nickname: \"@falka\",\n  content:\"Do you really wish to know?\",\n  image: CIRI_IMAGE,\n  date:\"25 мая.\",\n},\n{\n  name: \"ZENA\",\n  photo: XENAPRINCES_IMAGE,\n  nickname: \"@warrior_princess\",\n  content:\"If you can run, run.\",\n  image: XENA_IMAGE,\n  date:\"23 февр.\",\n},\n];\n\nfunction App(){\n  return(\n    <div >\n      { postList.map(post => <Post {...post}/>)}\n    </div>\n  )\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(<App/>, document.getElementById(\"root\"));\n/*\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);*/\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}